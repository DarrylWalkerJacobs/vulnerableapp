using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Npgsql;
using System.Web;

namespace VulnerabilityScannerTestApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SomeController : ControllerBase
    {
        private readonly Microsoft.AspNetCore.Hosting.IHostingEnvironment environment;
        public SomeController(Microsoft.AspNetCore.Hosting.IHostingEnvironment _environment)
        {
            this.environment = _environment;
        }

        [HttpGet]
        public IActionResult Index()
        {
            return Ok();
        }

        [Authorize]
        [HttpPost("search")]
        public async Task<IActionResult> Search([FromBody] string searchTerm)
        {
            if (searchTerm is null)
            {
                return BadRequest("No search term");
            }
            var connstringbuilder = new NpgsqlConnectionStringBuilder();
            connstringbuilder.Password = "aFo*n23!";
            connstringbuilder.Database = "hack_this_database";
            connstringbuilder.Host = "localhost";
            connstringbuilder.Username = "postgres";
            // Vulnerability: database password exposed 
            var connection = new NpgsqlConnection("Host=localhost;Database=hack_this_database;Username=postgres;Password=h;Integrated Security=true;Pooling=true;SSL Mode=Require;Trust Server Certificate=true;ApplicationName=VelocityVMProd;");
            await connection.OpenAsync();
            // Vulnerability: SQL Injection 
            await using var cmd = new NpgsqlCommand(
                $"SELECT * FROM " +
                $"public.some_table " +
                $"WHERE some_column = '${searchTerm}'", connection);
            await cmd.ExecuteNonQueryAsync();

            return Ok();
        }


        [Authorize]
        [HttpPost("{url}")]
        public async Task<IActionResult> RedirectMe(string url)
        {
            // Vulnerability: redirecting based directly on user input
            return new RedirectResult(url);
        }

        [HttpPost("download")]
        public ActionResult Download([FromBody] string fileName)
        {
            var fileContents = System.IO.File.ReadAllBytes(System.IO.Path.Combine(environment.WebRootPath, fileName));
            return File(fileContents, System.Net.Mime.MediaTypeNames.Application.Octet, fileName);
        }

        [HttpGet("{myParam}")]
        public string XSS(string myParam)
        {
            return "value " + myParam;
        }

        [HttpPost("login")]
        public ActionResult UnprotectedLogin()
        {
            return Ok();
        }
    }
}
